@c -*-texinfo-*-
@c This is part of the Quagga Manual.
@c @value{COPYRIGHT_STR}
@c See file quagga.texi for copying conditions.
@node Babel
@chapter Babel

Babel is an interior gateway protocol that is suitable both for wired
networks and for wireless mesh networks.  Babel has been described as
``RIP on speed'' --- it is based on the same principles as RIP, but
includes a number of refinements that make it react much faster to
topology changes without ever counting to infinity, and allow it to
perform reliable link quality estimation on wireless links.  Babel is
a double-stack routing protocol, meaning that a single Babel instance
is able to perform routing for both IPv4 and IPv6.

Quagga implements Babel as described in RFC6126.

@menu
* Configuring babeld::          
* Babel configuration::         
* Babel redistribution::        
* Show Babel information::      
* Babel debugging commands::    
@end menu

@node Configuring babeld, Babel configuration, Babel, Babel
@section Configuring babeld

The @command{babeld} daemon can be invoked with any of the common
options (@pxref{Common Invocation Options}).

The @command{zebra} daemon must be running before @command{babeld} is
invoked. Also, if @command{zebra} is restarted then @command{babeld}
must be too.

Configuration of @command{babeld} is done in its configuration file
@file{babeld.conf}.

@node Babel configuration, Babel redistribution, Configuring babeld, Babel
@section Babel configuration

@deffn Command {router babel} {}
@deffnx Command {no router babel} {}
Enable or disable Babel routing.
@end deffn

@deffn {Babel Command} {network @var{ifname}} {}
@deffnx {Babel Command} {no network @var{ifname}} {}
Enable or disable Babel on the given interface.
@end deffn

@deffn {Interface Command} {babel wired} {}
@deffnx {Interface Command} {babel wireless} {}
Specifies whether this interface is wireless, which disables a number
of optimisations that are only correct on wired interfaces.
Specifying @code{wireless} (the default) is always correct, but may
cause slower convergence and extra routing traffic.
@end deffn

@deffn {Interface Command} {babel split-horizon}
@deffnx {Interface Command} {no babel split-horizon}
Specifies whether to perform split-horizon on the interface.
Specifying @code{no babel split-horizon} (the default) is always
correct, while @code{babel split-horizon} is an optimisation that
should only be used on symmetric and transitive (wired) networks.
@end deffn

@deffn {Interface Command} {babel hello-interval <20-655340>}
Specifies the time in milliseconds between two scheduled hellos.  On
wired links, Babel notices a link failure within two hello intervals;
on wireless links, the link quality value is reestimated at every
hello interval.  The default is 4000@dmn{ms}.
@end deffn

@deffn {Interface Command} {babel update-interval <20-655340>}
Specifies the time in milliseconds between two scheduled updates.
Since Babel makes extensive use of triggered updates, this can be set
to fairly high values on links with little packet loss.  The default
is 20000@dmn{ms}.
@end deffn

@deffn {Interface Command} {babel authentication mode @var{authmode} key-chain @var{keychain}} {}
@deffnx {Interface Command} {no babel authentication mode @var{authmode} key-chain @var{keychain}} {}
Manage (add or remove) configured security associations (CSAs) for the current
interface. There may be multiple CSAs configured for an interface.
@var{keychain} stands for a name of a standard key chain. @var{authmode} stands
for a HMAC algorithm based on one of the following hash functions of choice.
A HMAC algorithm uses a secret key and a compound PC/TS number to produce one
or more digests for each protocol packet.
@itemize @bullet
@item
@code{sha256/sha384/sha512}:
SHA-256, SHA-384 and SHA-512 hash functions respectively, which belong to SHA-2
family of hash functions and produce a digest 256-bit, 384-bit and 512-bit long
respectively.
@item
@code{rmd160}:
RIPEMD-160 hash function, which produces a digest 160-bit long.
@item
@code{whirlpool}:
Whirlpool hash function, which produces a digest 512-bit long.
@end itemize
All of the hash functions listed above are considered relatively strong at the
time of this writing and require Quagga to be built with gcrypt library.
@ref{The Configure script and its options}
@end deffn

@deffn {Interface Command} {no babel authentication} {}
Remove all configured security associations (CSAs) from the current interface.
@end deffn

@deffn {Babel Command} {babel resend-delay <20-655340>}
Specifies the time in milliseconds after which an ``important''
request or update will be resent.  The default is 2000@dmn{ms}.  You
probably don't want to tweak this value.
@end deffn

@deffn {Babel Command} {anm-timeout <5-4294967295>} {}
@deffnx {Babel Command} {no anm-timeout [<5-4294967295>]} {}
Specifies the time in seconds, for which a record about a formerly active
authentic Babel neighbor will be retained in ANM (authentic neighbor memory).
The default is 300@dmn{s}.
@end deffn

@deffn {Babel Command} {ts-base (zero|unixtime)} {}
@deffnx {Babel Command} {no ts-base [(zero|unixtime)]} {}
Controls setting of TS (Timestamp) variable of local routing process. TS is
put into a PC/TS TLV of every packet being authenticated to prevent replay
attacks.
@itemize @bullet
@item
@code{unixtime}:
Configures UNIX time as TS base: makes TS be greater or equal to the current
UNIX time, which allows for unique PC/TS pairs for the deployed lifetime of
a Babel router. This is the default mode in Quagga.
@item
@code{zero}
Configures 0 as TS base: TS starts at value 0 and increment each time the
Packet Counter wraps.
@end itemize
@end deffn

@node Babel redistribution, Show Babel information, Babel configuration, Babel
@section Babel redistribution

@deffn {Babel command} {redistribute @var{kind}}
@deffnx {Babel command} {no redistribute @var{kind}}
Specify which kind of routes should be redistributed into Babel.
@end deffn

@node Show Babel information, Babel debugging commands, Babel redistribution, Babel
@section Show Babel information

@deffn {Command} {show babel database} {}
@deffnx {Command} {show babel interface} {}
@deffnx {Command} {show babel neighbor} {}
@deffnx {Command} {show babel parameters} {}
These commands dump various parts of @command{babeld}'s internal
state.  They are mostly useful for troubleshooting.
@end deffn

@deffn {Command} {show babel authentication stats} {}
@deffnx {Command} {clear babel authentication stats} {}
There are some statistics built during operation of packet authentication
extension. These commands display and reset those statistics.
@end deffn

@deffn {Command} {show babel authentication memory} {}
@deffnx {Command} {clear babel authentication memory} {}
Babel packet authentication extension maintains an internal table known as
"authentic neighbors memory" (ANM), which is used to protect against packet
replay attacks. ANM retains PC/TS values of authentic Babel neighbors, both
current and formerly active, for "ANM timeout" period of time.

The commands display and reset ANM records. Resetting ANM records may be
necessary to avoid a "quarantine period" for restarted Babel neighbors
operating in "NVRAM-less wrap counter" TS mode.
@end deffn

@node Babel debugging commands,  , Show Babel information, Babel
@section Babel debugging commands

@deffn {Babel Command} {debug babel @var{kind}} {}
@deffnx {Babel Command} {no debug babel @var{kind}} {}
Enable or disable debugging messages of a given kind.  @var{kind} can
be one of @samp{common}, @samp{kernel}, @samp{filter}, @samp{timeout},
@samp{interface}, @samp{route}, @samp{authentication} or @samp{all}. Note that if you have
compiled with the NO_DEBUG flag, then these commands aren't available.
@end deffn

